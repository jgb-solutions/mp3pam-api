"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

# Protected Queries
type Query @middleware(checks: ["auth:api"]) {
	me: User! @auth
	# Upload URL
	uploadUrl(name: String!, bucket: String! @spread): UploadUrl!
		@field(resolver: "UploadUrlQuery")
}

# Public Queries
extend type Query {
	# Auth
	login(input: LoginInput!): LoginPayload @field(resolver: "LoginQuery")

	# Tracks
	tracks(page: Int = 1, orderBy: [OrderByClause!] @orderBy): [Track!]!
		@paginate(defaultCount: 20)
	track(hash: String! @eq): Track @find

	# Users
	users(page: Int = 1, orderBy: [OrderByClause!] @orderBy): [User!]!
		@paginate(defaultCount: 20)
	user(id: ID! @eq): User @find

	# Genres
	genres(
		page: Int = 1
		orderBy: [OrderByClause!] = [{ field: "name", order: ASC }] @orderBy
	): [Genre!]! @paginate(defaultCount: 20)
	genre(slug: String! @eq): Genre @find

	# Artists
	artists(page: Int = 1, orderBy: [OrderByClause!] @orderBy): [Artist!]!
		@paginate(defaultCount: 20)
	artist(hash: ID @eq): Artist @find

	albums(page: Int = 1, orderBy: [OrderByClause!] @orderBy): [Album!]!
		@paginate(defaultCount: 20)
	albums(hash: ID @eq): Album @find

	# Facebook Login URL
	facebookLoginUrl: facebookLoginUrl! @field(resolver: "FacebookLoginUrlQuery")
}

type Mutation @middleware(checks: ["auth:api"]) {
	# Auth
	logout: LogOutSuccess! @field(resolver: "LogOutMutation")

	# Users
	updateUser(id: ID!, name: String): User @update
	deleteUser(id: ID!): User @delete

	# Tracks
	addTrack(input: TrackInput!): Track! @field(resolver: "CreateTrackMutation")

	# Genres
	addGenre(input: GenreInput!): Genre! @field(resolver: "CreateGenreMutation")

	#Artists
	addArtist(input: ArtistInput!): Artist!
		@field(resolver: "CreateArtistMutation")

	# Albums
	createAlbum(input: AlbumInput!): Album! @field(resolver: "CreateAlbumMutation")
}

extend type Mutation {
	# Auth
	register(input: RegisterInput! @spread): User! @create
	handleFacebookConnect(code: String! @spread): facebookLoginPayload!
		@field(resolver: "HandleFacebookConnectMutation")
}

type facebookLoginUrl {
	url: String!
}

type LogOutSuccess {
	success: Boolean
}

type UploadUrl {
	signedUrl: String!
	filename: String!
}

input TrackInput {
	title: String!
	audioName: String!
	poster: String!
	detail: String
	lyrics: String
	audioFileSize: Int!
	artistId: Int!
	genreId: Int!
	number: Int
	img_bucket: String!
	audio_bucket: String!
}

input GenreInput {
	name: String!
}

input ArtistInput {
	name: String!
	stage_name: String!
	poster: String
	img_bucket: String!
	bio: String
	facebook: String
	twitter: String
	instagram: String
	youtube: String
}

input AlbumInput {
	title: String!
	release_year: Int!
	artist_id: Int!
	cover: String!
	detail: String
	img_bucket: String!
}

input RegisterInput {
	name: String! @rules(apply: ["required", "string"])
	email: String! @rules(apply: ["required", "email"])
	password: String! @rules(apply: ["required", "min:6"]) @bcrypt
	telephone: String @rules(apply: ["string"])
}

input LoginInput {
	email: String! @rules(apply: ["required", "email"])
	password: String!
		@rules(
			apply: ["required", "min:6"]
			messages: { min: "The password you provided is too short." }
		)
}

type LoginPayload {
	data: User!
	token: String!
}

type facebookLoginPayload {
	data: User!
	token: String!
	firstLogin: Boolean!
}

input OrderByClause {
	field: String!
	order: SortOrder!
}

enum SortOrder {
	ASC
	DESC
}

type User {
	id: ID!
	name: String!
	email: String
	avatar: String
	active: Boolean!
	artists: [Track!]! @hasMany(type: "paginator", defaultCount: 20)
	tracks: [Track!]! @hasMany(type: "paginator", defaultCount: 20)
	albums: [Artist!]! @hasMany(type: "paginator", defaultCount: 20)
	artists_by_stage_name_asc: [Artist!]! @hasMany(type: "paginator", defaultCount: 20)
	telephone: String
	created_at: DateTime!
	updated_at: DateTime!
}

type Artist {
	id: ID!
	name: String!
	stage_name: String!
	hash: Int!
	poster_url: String!
	tracks: [Track!]! @hasMany(type: "paginator", defaultCount: 20)
	user: User! @belongsTo
	facebook_url: String
	twitter_url: String
	instagram_url: String
	youtube_url: String
	created_at: DateTime!
	updated_at: DateTime!
}

type Album {
	id: ID!
	title: String!
	hash: Int!
	cover_url: String!
	detail: String!
	user: User! @belongsTo
	artist: Artist! @belongsTo
	release_year: DateTime!
	created_at: DateTime!
	updated_at: DateTime!
}

type Track {
	id: ID!
	title: String!
	hash: Int!
	audio_url: String!
	poster_url: String!
	featured: Boolean!
	detail: String
	lyrics: String
	genre: Genre! @belongsTo
	artist: Artist! @belongsTo
	user: User! @belongsTo
	number: Int!
	created_at: DateTime!
	updated_at: DateTime!
}

type Genre {
	id: ID!
	name: String!
	slug: String!
	tracks: [Track!]! @hasMany(type: "paginator", defaultCount: 20)
	created_at: DateTime!
	updated_at: DateTime!
}
